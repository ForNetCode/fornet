#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.

use crate::flutter_api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_config_path_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "get_config_path",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_config_path()),
    )
}
fn wire_init_runtime_impl(
    port_: MessagePort,
    config_path: impl Wire2Api<String> + UnwindSafe,
    work_thread: impl Wire2Api<usize> + UnwindSafe,
    log_level: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, ()>(
        WrapInfo {
            debug_name: "init_runtime",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_config_path = config_path.wire2api();
            let api_work_thread = work_thread.wire2api();
            let api_log_level = log_level.wire2api();
            move |task_callback| init_runtime(api_config_path, api_work_thread, api_log_level)
        },
    )
}
fn wire_join_network_impl(port_: MessagePort, invite_code: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "join_network",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_invite_code = invite_code.wire2api();
            move |task_callback| join_network(api_invite_code)
        },
    )
}
fn wire_list_network_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "list_network",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| list_network(),
    )
}
fn wire_version_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, String>(
        WrapInfo {
            debug_name: "version",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| version(),
    )
}
fn wire_test_param_impl(
    port_: MessagePort,
    client_message: impl Wire2Api<ClientMessage> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Option<ClientMessage>>(
        WrapInfo {
            debug_name: "test_param",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_client_message = client_message.wire2api();
            move |task_callback| Ok(test_param(api_client_message))
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
pub struct mirror_ClientInfo(ClientInfo);

#[derive(Clone)]
pub struct mirror_ClientMessage(ClientMessage);

#[derive(Clone)]
pub struct mirror_Interface(Interface);

#[derive(Clone)]
pub struct mirror_Peer(Peer);

#[derive(Clone)]
pub struct mirror_WrConfig(WrConfig);

// Section: static checks

const _: fn() = || {
    match None::<ClientInfo>.unwrap() {
        ClientInfo::Config(field0) => {
            let _: WrConfig = field0;
        }
        ClientInfo::Status(field0) => {
            let _: i32 = field0;
        }
    }
    {
        let ClientMessage = None::<ClientMessage>.unwrap();
        let _: String = ClientMessage.network_id;
        let _: Option<ClientInfo> = ClientMessage.info;
    }
    {
        let Interface = None::<Interface>.unwrap();
        let _: Option<String> = Interface.name;
        let _: Vec<String> = Interface.address;
        let _: i32 = Interface.listen_port;
        let _: Vec<String> = Interface.dns;
        let _: Option<u32> = Interface.mtu;
        let _: Option<String> = Interface.pre_up;
        let _: Option<String> = Interface.post_up;
        let _: Option<String> = Interface.pre_down;
        let _: Option<String> = Interface.post_down;
        let _: i32 = Interface.protocol;
    }
    {
        let Peer = None::<Peer>.unwrap();
        let _: Option<String> = Peer.endpoint;
        let _: Vec<String> = Peer.allowed_ip;
        let _: String = Peer.public_key;
        let _: u32 = Peer.persistence_keep_alive;
        let _: Vec<String> = Peer.address;
    }
    {
        let WrConfig = None::<WrConfig>.unwrap();
        let _: Option<Interface> = WrConfig.interface;
        let _: Vec<Peer> = WrConfig.peers;
        let _: i32 = WrConfig.typ;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_ClientInfo {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            ClientInfo::Config(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            ClientInfo::Status(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ClientInfo {}
impl rust2dart::IntoIntoDart<mirror_ClientInfo> for ClientInfo {
    fn into_into_dart(self) -> mirror_ClientInfo {
        mirror_ClientInfo(self)
    }
}

impl support::IntoDart for mirror_ClientMessage {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.network_id.into_into_dart().into_dart(),
            self.0.info.map(|v| mirror_ClientInfo(v)).into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ClientMessage {}
impl rust2dart::IntoIntoDart<mirror_ClientMessage> for ClientMessage {
    fn into_into_dart(self) -> mirror_ClientMessage {
        mirror_ClientMessage(self)
    }
}

impl support::IntoDart for mirror_Interface {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.name.into_dart(),
            self.0.address.into_into_dart().into_dart(),
            self.0.listen_port.into_into_dart().into_dart(),
            self.0.dns.into_into_dart().into_dart(),
            self.0.mtu.into_dart(),
            self.0.pre_up.into_dart(),
            self.0.post_up.into_dart(),
            self.0.pre_down.into_dart(),
            self.0.post_down.into_dart(),
            self.0.protocol.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Interface {}
impl rust2dart::IntoIntoDart<mirror_Interface> for Interface {
    fn into_into_dart(self) -> mirror_Interface {
        mirror_Interface(self)
    }
}

impl support::IntoDart for mirror_Peer {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.endpoint.into_dart(),
            self.0.allowed_ip.into_into_dart().into_dart(),
            self.0.public_key.into_into_dart().into_dart(),
            self.0.persistence_keep_alive.into_into_dart().into_dart(),
            self.0.address.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Peer {}
impl rust2dart::IntoIntoDart<mirror_Peer> for Peer {
    fn into_into_dart(self) -> mirror_Peer {
        mirror_Peer(self)
    }
}

impl support::IntoDart for mirror_WrConfig {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.interface.map(|v| mirror_Interface(v)).into_dart(),
            self.0.peers.into_into_dart().into_dart(),
            self.0.typ.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_WrConfig {}
impl rust2dart::IntoIntoDart<mirror_WrConfig> for WrConfig {
    fn into_into_dart(self) -> mirror_WrConfig {
        mirror_WrConfig(self)
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
