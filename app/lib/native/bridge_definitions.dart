// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.80.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

part 'bridge_definitions.freezed.dart';

abstract class FornetLib {
  Future<String> getConfigPath({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetConfigPathConstMeta;

  Future<void> initRuntime(
      {required String configPath,
      required int workThread,
      required String logLevel,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitRuntimeConstMeta;

  Future<String> joinNetwork({required String inviteCode, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kJoinNetworkConstMeta;

  Future<String> listNetwork({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListNetworkConstMeta;

  Future<String> version({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVersionConstMeta;

  Future<ClientMessage?> testParam(
      {required ClientMessage clientMessage, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestParamConstMeta;
}

@freezed
sealed class ClientInfo with _$ClientInfo {
  const factory ClientInfo.config(
    WrConfig field0,
  ) = ClientInfo_Config;
  const factory ClientInfo.status(
    int field0,
  ) = ClientInfo_Status;
}

class ClientMessage {
  final String networkId;
  final ClientInfo? info;

  const ClientMessage({
    required this.networkId,
    this.info,
  });
}

class Interface {
  final String? name;
  final List<String> address;
  final int listenPort;
  final List<String> dns;
  final int? mtu;
  final String? preUp;
  final String? postUp;
  final String? preDown;
  final String? postDown;
  final int protocol;

  const Interface({
    this.name,
    required this.address,
    required this.listenPort,
    required this.dns,
    this.mtu,
    this.preUp,
    this.postUp,
    this.preDown,
    this.postDown,
    required this.protocol,
  });
}

class Peer {
  final String? endpoint;
  final List<String> allowedIp;
  final String publicKey;
  final int persistenceKeepAlive;
  final List<String> address;

  const Peer({
    this.endpoint,
    required this.allowedIp,
    required this.publicKey,
    required this.persistenceKeepAlive,
    required this.address,
  });
}

class WrConfig {
  final Interface? interface;
  final List<Peer> peers;
  final int typ;

  const WrConfig({
    this.interface,
    required this.peers,
    required this.typ,
  });
}
