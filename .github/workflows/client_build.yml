name: fornet client build
on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: "docker version to release"
env:
  REGISTRY: ghcr.io
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GithubPackages
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          #platforms: linux/amd64,linux/arm64
          push: true
          file: command/docker/client/client.Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.REGISTRY }}/fornetcode/fornet:${{github.event.inputs.version}}, ${{ env.REGISTRY }}/fornetcode/fornet:latest
  UnixCommandLine:
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: make release-linux
          - host: macos-latest
            target: x86_64-apple-darwin
            build: make release-mac-x86_64
          - host: macos-13-xlarge
            target: aarch64-apple-darwin
            build: make release-mac-aarch64           
          # - host: macos-latest # This needs aarch64 OpenSSL, will wait github action support MacOS M1(https://github.com/github/roadmap/issues/528), then run this.
          #   target: aarch64-apple-darwin
          #   build: make release-mac-aarch64
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust
        uses: actions-rs/toolchain@v1        
        with:
          toolchain: stable
          target: ${{ matrix.settings.target }}
          profile: minimal
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            client/target/            
          key: ${{ matrix.settings.host }}-${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.settings.host }}-cargo-${{ matrix.settings.target }}
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
      - name: Build
        run: ${{ matrix.settings.build }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: fornet-${{ matrix.settings.target }}
          path: release/*
          if-no-files-found: error
  WindowsCommandLine:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc
          profile: minimal
      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              client/target/            
          key: windows-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: windows-cargo
      - name: build
        shell: pwsh
        run: ./windows-build.ps1
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: fornet-win11-x86_64
          path: release/*
          if-no-files-found: error

         