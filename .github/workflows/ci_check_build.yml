name: simple ci
on:
  push:
    branches:
      - 'main'

jobs:
  check_backend:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v3
          with:
            submodules: true

        - name: Setup node
          uses: actions/setup-node@v3
          with:
            node-version: 18
            cache: 'npm'
            cache-dependency-path: 'admin-web/package-lock.json'

        - name: build admin-web
          run: cd admin-web && npm ci&& npm run build:prod && cd ../

        - uses: coursier/cache-action@v6
        - uses: coursier/setup-action@v1
          with:
            jvm: temurin:1.17

        - name: build backend
          run: cd backend && sbt compile && cd ../

  check_client:
    strategy:
      max-parallel: 1
      fail-fast: true
      matrix:
        settings:
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: make release-linux
          - host: macos-latest
            target: x86_64-apple-darwin
            build: make release-mac-x86_64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            build: ./windows-ci.ps1   
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install Rust
        uses: actions-rs/toolchain@v1        
        with:
          toolchain: stable
          target: ${{ matrix.settings.target }}
          profile: minimal
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            client/target/
          key: ${{ matrix.settings.host }}-${{ matrix.settings.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.settings.host }}-cargo-${{ matrix.settings.target }}
      - if: runner.os == 'Windows'      
        name: Build
        shell: pwsh
        run: ${{ matrix.settings.build }}
      - if: runner.os != 'Windows'
        name: Build
        run: ${{ matrix.settings.build }} 

