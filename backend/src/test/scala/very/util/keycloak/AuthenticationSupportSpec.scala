package very.util.keycloak

import munit.FunSuite
import org.keycloak.TokenVerifier
//import org.keycloak.adapters.rotation.AdapterTokenVerifier
import org.keycloak.jose.jwk.{JWKParser, RSAPublicJWK}
import org.keycloak.representations.AccessToken
import zio.json.ast.*

import scala.io.Source

class AuthenticationSupportSpec extends FunSuite {
  test("verify") {

    val token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJCVEYxbkl6QWFnY0JPbnZCUWh3Q1A2SnNSNzlkTC1SamJBWE00TVpZQ01rIn0.eyJleHAiOjE2Njg5MTU4MzAsImlhdCI6MTY2ODkxNTUzMCwiYXV0aF90aW1lIjoxNjY4OTE0MzM1LCJqdGkiOiJmNWFkNzE1ZC03MjVmLTQ4OTMtOTlmNy01OTdiNmQzMjFhMDciLCJpc3MiOiJodHRwOi8va2V5Y2xvYWtfZGV2LmZvcm5ldC5jb20vcmVhbG1zL2Zvcm5ldCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJmODg1ZGQ3Mi01Yzk3LTRlYjItYWFmNS1mOTVlZjIxOTYwOWUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJmb3JuZXQiLCJub25jZSI6Ijk3NDM0M2U2LWIxOTgtNGUzNy04ZmU4LWE0OWY4ZjYxNjU1NCIsInNlc3Npb25fc3RhdGUiOiJkNTIwMWNhZi1jOTlkLTRiOWMtOGZhMS02MWYwOWNiMDI0NmQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHA6Ly9kZXYuZm9ybmV0LmNvbSIsImRldi5mb3JuZXQuY29tIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLWZvcm5ldCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiZDUyMDFjYWYtYzk5ZC00YjljLThmYTEtNjFmMDljYjAyNDZkIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJmb3JuZXQiLCJlbWFpbCI6InpzeS5ldmFuQGdtYWlsLmNvbSJ9.XksZfYuedqPzJKGl9-t0mm_BkecM6hp5fO29M4C6YpF7tXg1ziNo0_oBJ33CUAe-FpmRl_xIrMahXbOIRRTejTJZpVFty57B_4ubmn9Yp-41PNjxCvYAPqNGtCBnCIzzAM_463XDvYjEETUIsyOyvzTMWrRhjJRA5eh4QMRa5xcK1aY2scTeJ9PxzNJeGfCVfB3HRvgBzFhBDMwyJ5kbK_3OhRAC9h73WNva47U1ffAb3CHrr5xu954LyzbXVj9mnmVnULZtxehsG6Ndf1CtNg1Xim0sGeUmp1eP1d2mLxWyv8XiYsy2V6tpKhAQOF2a0PCVtp6Gfe-kqMK6LBDGyA"
    //val token = """{"access_token":"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJCVEYxbkl6QWFnY0JPbnZCUWh3Q1A2SnNSNzlkTC1SamJBWE00TVpZQ01rIn0.eyJleHAiOjE2Njg5MTQ2MzcsImlhdCI6MTY2ODkxNDMzNywiYXV0aF90aW1lIjoxNjY4OTE0MzM1LCJqdGkiOiIwMzNlZWQwZi05YTQ4LTQwZjQtYWFlYy03ZWMzMGIxNWE5ZDIiLCJpc3MiOiJodHRwOi8va2V5Y2xvYWtfZGV2LmZvcm5ldC5jb20vcmVhbG1zL2Zvcm5ldCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJmODg1ZGQ3Mi01Yzk3LTRlYjItYWFmNS1mOTVlZjIxOTYwOWUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJmb3JuZXQiLCJub25jZSI6Ijk3NDM0M2U2LWIxOTgtNGUzNy04ZmU4LWE0OWY4ZjYxNjU1NCIsInNlc3Npb25fc3RhdGUiOiJkNTIwMWNhZi1jOTlkLTRiOWMtOGZhMS02MWYwOWNiMDI0NmQiLCJhY3IiOiIxIiwiYWxsb3dlZC1vcmlnaW5zIjpbImh0dHA6Ly9kZXYuZm9ybmV0LmNvbSIsImRldi5mb3JuZXQuY29tIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLWZvcm5ldCIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiZDUyMDFjYWYtYzk5ZC00YjljLThmYTEtNjFmMDljYjAyNDZkIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJmb3JuZXQiLCJlbWFpbCI6InpzeS5ldmFuQGdtYWlsLmNvbSJ9.KLHxVQiML7oi-wDnQzAK_P-z4m4yhZI8d9leyJFKPTWx1h0LAne0O1j8YRShWgNjxYGyTelHfArmXny_s1xY7wjnoSrFI0OiWoK8XtUiTUCK9sso9CoCunV1DnQ_wX7CGK075kgr5JRqX65dzdNssLVE78qzeePyQYQfhFR8Kmyb1sNx3JiVjejrZxoDb2JQMUPIuMnrcbx9fCfZ6Ns5uPk0IJuJzKBTMGuxpfidzu1csSfvk5jJ2SIPNv6CT6GAQcsZ6v1Hc6SNb5r1_ukRmh3z-6s-tqu6O78s-nwwp0EdbhKXhyTpzt2hgxaZDwpkQf-a2lu27-8-dmNTCPeD_w","expires_in":300,"refresh_expires_in":1800,"refresh_token":"eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICI4YzYxZTRmNy0zMTk0LTRkMTQtYjNhMi0xZTMxODM3ZGQ5MTMifQ.eyJleHAiOjE2Njg5MTYxMzcsImlhdCI6MTY2ODkxNDMzNywianRpIjoiYWNjODc5OWEtYWUzYy00ZTlmLWE2NjAtZDI3NjU4MGM4Y2JlIiwiaXNzIjoiaHR0cDovL2tleWNsb2FrX2Rldi5mb3JuZXQuY29tL3JlYWxtcy9mb3JuZXQiLCJhdWQiOiJodHRwOi8va2V5Y2xvYWtfZGV2LmZvcm5ldC5jb20vcmVhbG1zL2Zvcm5ldCIsInN1YiI6ImY4ODVkZDcyLTVjOTctNGViMi1hYWY1LWY5NWVmMjE5NjA5ZSIsInR5cCI6IlJlZnJlc2giLCJhenAiOiJmb3JuZXQiLCJub25jZSI6Ijk3NDM0M2U2LWIxOTgtNGUzNy04ZmU4LWE0OWY4ZjYxNjU1NCIsInNlc3Npb25fc3RhdGUiOiJkNTIwMWNhZi1jOTlkLTRiOWMtOGZhMS02MWYwOWNiMDI0NmQiLCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwic2lkIjoiZDUyMDFjYWYtYzk5ZC00YjljLThmYTEtNjFmMDljYjAyNDZkIn0.UWnCGNOMO55Cnw90QnyeF-1jTg05NWuY6_LoEZDPjOU","token_type":"Bearer","id_token":"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJCVEYxbkl6QWFnY0JPbnZCUWh3Q1A2SnNSNzlkTC1SamJBWE00TVpZQ01rIn0.eyJleHAiOjE2Njg5MTQ2MzcsImlhdCI6MTY2ODkxNDMzNywiYXV0aF90aW1lIjoxNjY4OTE0MzM1LCJqdGkiOiJjN2NkMTIwNy1iZDIyLTQ1NjAtYTljZC0zN2Y4ZjMxYjg4YWIiLCJpc3MiOiJodHRwOi8va2V5Y2xvYWtfZGV2LmZvcm5ldC5jb20vcmVhbG1zL2Zvcm5ldCIsImF1ZCI6ImZvcm5ldCIsInN1YiI6ImY4ODVkZDcyLTVjOTctNGViMi1hYWY1LWY5NWVmMjE5NjA5ZSIsInR5cCI6IklEIiwiYXpwIjoiZm9ybmV0Iiwibm9uY2UiOiI5NzQzNDNlNi1iMTk4LTRlMzctOGZlOC1hNDlmOGY2MTY1NTQiLCJzZXNzaW9uX3N0YXRlIjoiZDUyMDFjYWYtYzk5ZC00YjljLThmYTEtNjFmMDljYjAyNDZkIiwiYXRfaGFzaCI6ImhDaEJJR3JQaXR0bURSSlIwNnVxc3ciLCJhY3IiOiIxIiwic2lkIjoiZDUyMDFjYWYtYzk5ZC00YjljLThmYTEtNjFmMDljYjAyNDZkIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJmb3JuZXQiLCJlbWFpbCI6InpzeS5ldmFuQGdtYWlsLmNvbSJ9.bYC4dWooXjTKOy97y3jugO8VTSZNC_aETCELGW_Wo2A1fvdp6iHdCzTgTi4jXp6X9xIWOmrRY975WYiNPWDzJ6WTR0a9CxLk0KvhRNittkAD0RaUFVxRuHrUmmCkEQV7m1enbW6ldcEqWvJz-TARZGLIsMaufVfpUwOIce56CzUCdOrBM9E6IlXYLxNlQ8tiN2rfPi8XgFghxOgPr8YjALqG8K0zOPb44TtipBvtqiF3MSZGDkeA7zZEzArc5pl5duX-A8PLvrsqxQyBEurc45maL-lHOtE3jlaRazyzqYfeZi88JgrwV6n4Bg5gbyUi2PGTX4b__Fclc6WANpqcMQ","not-before-policy":0,"session_state":"d5201caf-c99d-4b9c-8fa1-61f09cb0246d","scope":"openid email profile"}"""
    //TokenVerifier.createWithoutSignature()
    //AdapterTokenVerifier.verifyToken(token)
    val data = TokenVerifier.create(token, classOf[AccessToken])
      .withDefaultChecks()
      .realmUrl("http://keycloak_dev.fornet.com/realms/fornet")
    val kid = data.getHeader.getKeyId
    val publicKeyLocator = JWKPublicKeyLocator.init("http://keycloak_dev.fornet.com", "fornet").get

    data.publicKey(publicKeyLocator.getPublicKey(kid).get)

    data.verify()
    val accessToken = data.getToken
    println(data)
    println(accessToken)

  }

  test("get data") {
    import zio.json.*
    //import zio.json.ast.Json

    val data = Source.fromURL("http://keycloak_dev.fornet.com/realms/fornet/protocol/openid-connect/certs").mkString
    data.toJsonAST match {
      case Right(value)=>
        println(value)
        val arr = value.get(JsonCursor.field("keys")>>> JsonCursor.isArray).toOption.get
        val jwkJson = arr.elements.collectFirst {
          case elem if elem.get(JsonCursor.field("alg")>>> JsonCursor.isString).contains(Json.Str("alg")) =>
            elem.toJson
        }.get

        val jwk = JWKParser.create().parse(jwkJson).getJwk

        //JwtConsumerBuilder()

      case Left(_) =>
    }

    println(data)
  }

}
